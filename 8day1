#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<time.h>
#define tm_year tm_year+1900
#define tm_mon tm_mon+1
typedef struct{
	short boot;
}boot_block;

typedef struct{
	unsigned long inode_check[8];
	unsigned long data_check[16];
}super_block;

typedef struct inode_block{
	_Bool file_type; // 0:file , 1:directory
	long file_size;
	struct tm time;
	unsigned short db_n[3]; // 0:direct 1:single 2:double
}inode_block;

typedef struct data_block{
	char data[128];
}data_block;

typedef struct data_list{
	char data[128];
	struct data_list *next;
}data_list;

typedef struct tree{
	char name[5];
	struct tree* child;
	struct tree* bro;
}tree;


boot_block bb; 

super_block sb;
inode_block *ib;
data_block *db;

tree root;
tree *cur=&root;

char location[5];
unsigned short cur_dir_inode=0;
FILE *fs;

void mymkfs();
void mystate();
void mytree();
int input_prompt();

int new_tree(char name[]); ///?대? ?덈뒗 ?대쫫?대㈃ 0, ??留뚮뱾?덉쑝硫?1 由ы꽩

unsigned short make_inode(); ///?ъ슜媛?ν븯硫댁꽌 媛??鍮좊Ⅸ inode_B ?섎쾭 李얘린, ?대떦 ?섎쾭???덊띁釉붾줉 鍮꾪듃 1濡?援먯껜
unsigned short make_data();  ///?ъ슜媛?ν븯硫댁꽌 媛??鍮좊Ⅸ data_B ?섎쾭 李얘린, ?대떦 ?섎쾭???덊띁釉붾줉 鍮꾪듃 1濡?援먯껜
unsigned short mk_indirect(unsigned short n, unsigned short db_ns[]); //(紐뉕컻 留뚮뱾寃껋씤媛, ?곗씠?곕? ?ｌ쓣 釉붾줉 ?섎쾭??

void write_super();                  //
void write_inode(unsigned short n);  ////
void write_data(unsigned short n);   //// myfs???묒꽦?댁＜湲? (data_B or inode_B ?섎쾭)

struct tm now_time(){
	struct tm* now;
	time_t ltime;
	ltime=time(NULL);
	now=localtime(&ltime);
	return *now;
}
void mycpfrom(char tmp[]){
	int i,j=0;
	char source_file[10];
	char my_dest_file[5],temp;
	unsigned short *db_ns;
	long file_start,file_end;
	for(i=0;i<40;i++,j++){
		if(tmp[i]==' ') break;
		source_file[j]=tmp[i];
	}
	source_file[j]='\0';
	i++;
	for(j=0;j<4;i++,j++)
		my_dest_file[j]=tmp[i];
	my_dest_file[j]='\0';

	FILE *ifp;
	unsigned short q,r,inode_n,db_n;
	if((ifp=fopen(source_file,"r"))==NULL){
		printf("mycpfrom : can not stat '%s' : no such file\n",source_file);
		return;
	}
	make_inode();
	new_tree(my_dest_file);
	ib=(inode_block*)calloc(1,sizeof(inode_block));
	ib->file_type=0;
	file_start=ftell(ifp);
	fseek(ifp,0,SEEK_END);
	file_end=ftell(ifp);
	ib->file_size=(file_end-file_start);
	ib->time=now_time();
	q=ib->file_size/128;
	r=ib->file_size%128;
	rewind(ifp);
	db=(data_block*)calloc(q+1,sizeof(data_block));
	if(q==0 && r>0){
		ib->db_n[0]=make_data();
		i=0;
		while((fscanf(ifp,"%c",&temp))!=EOF)
			db->data[i++]=temp;
	//	write_data(ib->db_n[0]);
	}
	printf("%c",db->data[2]);


	//ib->db_n[1]=mk_indirect(q);

}


int main(){
	char tmp[10];

	root.bro=NULL; root.child=NULL;

	while(1){
		if((fs=fopen("myfs","rb+"))==NULL)
			printf("error : can not find 'myfs' file.\n");
		else{
			fseek(fs,sizeof(boot_block),SEEK_SET);
			fread(&sb,1,sizeof(super_block),fs);
			break;
		}
		scanf("%s",tmp);
		if(0==strcmp("mymkfs",tmp)){ 
			mymkfs();
			getchar();
			break;
		}
	}

	input_prompt();

	return 0;
}

int input_prompt(void )
{
	int i,j;
	char tmp[40];
	char order[13];
	char prompt[40];
	while(1)
	{
		prompt[0]=0;
		printf("[/%s ]$ ",location);
		scanf("%[^\n]",prompt);

		for(i=0;i<40;i++)
		{  
			if(prompt[i]==' ') break;
			order[i]=prompt[i];
		}
		order[i]='\0';
		i++;
		for(j=0;i<40;j++,i++)
			tmp[j]=prompt[i];

		if(0==strcmp("byebye",order)) exit(1);

/*		else if(0==strcmp("mycat",order)) mycat(tmp);

		else if(0==strcmp("myshowfile",order)) myshowfile(tmp);

		else if(0==strcmp("mypwd",order)) mypwd(tmp);

		else if(0==strcmp("mycd",order)) mycd(tmp);

		else if(0==strcmp("mycp",order)) mycp(tmp);

		else if(0==strcmp("mycpto",order)) mycpto(tmp);

		else if(0==strcmp("myrmdir",order)) myrmdir(tmp);

		else if(0==strcmp("myrm",order)) myrm(tmp);

		else if(0==strcmp("mytouch",order)) mytouch(tmp);

		else if(0==strcmp("myshowinode",order)) myshowinode(tmp);

		else if(0==strcmp("myshowblock",order)) myshowblock(tmp);
*/
		else if(0==strcmp("mytree",order)) mytree(tmp);

		else if(0==strcmp("mystate",order)) mystate(tmp);

		else if(0==strcmp("mycpfrom",order)) mycpfrom(tmp);

		//	else if(0==strcmp("mymkdir",order)) mymkdir(tmp);

		else system(prompt);

		while(getchar()!='\n');
	}
}
unsigned short make_inode(){
	int i,j;
	unsigned long bit;
	unsigned short count=0;
	for(i=0;i<8;i++){
		bit=0x1;
		bit<<=63;
		if(sb.inode_check[i]){
			for(j=0;j<64;j++){
				if(bit & sb.inode_check[i]){
					count++;
					bit>>=1;
				}
				else{
					sb.inode_check[count/64]|=bit;
					break;
				}
			}
		}
		else{
			sb.inode_check[count/64]|=bit;
			break;
		}
	}
	return count; //苑?李⑤㈃ 512
}
unsigned short make_data(){
	int i,j;
	unsigned long bit,count=0;
	for(i=0;i<16;i++){
		bit=0x1;
		bit<<=63;
		if(sb.data_check[i]){
			for(j=0;j<64;j++){
				if(bit & sb.data_check[i]){
					count++;
					bit>>=1;
				}
				else{
					sb.data_check[count/64]|=bit;
					break;
				}
			}
		}
		else{
			sb.data_check[count/64]|=bit;
			break;
		}
	}
	return count; // 苑?李⑤㈃ 1024
}
void mystate(){
	int i,j;
	unsigned long bit;
	unsigned short data_count=0,inode_count=0;
	for(i=0;i<8;i++){
		bit=0x1;
		bit<<=63;
		for(j=0;j<64;j++){
			if(bit & sb.inode_check[i])
				inode_count++;
			bit>>=1;
		}

	}
	for(i=0;i<16;i++){
		bit=0x1;
		bit<<=63;
		for(j=0;j<64;j++){
			if(bit & sb.data_check[i])
				data_count++;
			bit>>=1;
		}
	}
	printf("free inode block : %hu\n",512-inode_count);
	printf("free data block : %hu\n",1024-data_count);
}
void write_super(){
	fseek(fs,sizeof(boot_block),SEEK_SET);
	fwrite(&sb,sizeof(super_block),1,fs);
}	

void write_data(unsigned short n){
	int i;
	fseek(fs,sizeof(boot_block),SEEK_SET);
	fseek(fs,sizeof(super_block),SEEK_CUR);
	fseek(fs,sizeof(inode_block)*512,SEEK_CUR);
	for(i=0;i<n;i++){
		fseek(fs,sizeof(data_block),SEEK_CUR);
	}
	fwrite(db,sizeof(data_block),1,fs); 
}	
void write_inode(unsigned short n){
	int i;
	fseek(fs,sizeof(boot_block),SEEK_SET);
	fseek(fs,sizeof(super_block),SEEK_CUR);
	for(i=0;i<n;i++){
		fseek(fs,sizeof(inode_block),SEEK_CUR);
	}
	fwrite(ib,sizeof(inode_block),1,fs); 
}	
void mymkfs(){
	bb.boot=0;
	short i;

	sb.inode_check[0]=1;
	sb.inode_check[0]<<=63;

	sb.data_check[0]=1;
	sb.data_check[0]<<=63;

	ib=(inode_block*)calloc(1,sizeof(inode_block));
	db=(data_block*)calloc(1,sizeof(data_block));

	fs=fopen("myfs","wb+");
	fwrite(&bb,sizeof(boot_block),1,fs);
	fwrite(&sb,sizeof(super_block),1,fs);
	for(i=0;i<512;i++){
		fwrite(ib,sizeof(inode_block),1,fs);
	}
	for(i=0;i<1024;i++){
		fwrite(db,sizeof(data_block),1,fs);
	}
	rewind(fs);
	free(ib);
	free(db);
}
void mytree(){
	tree *a,*children;
	a=root.child;
	printf("/\n");
	while(1){
		if(a==NULL) break;
		children=a->child;
		printf("--* %s\n",a->name);
		while(1){
			if(children==NULL) break;
			printf("-----* %s\n",children->name);
			children=children->bro;
		}
		a=a->bro;
	}
}
int new_tree(char name[]){ ///?대? ?덈뒗 ?대쫫?대㈃ 0, ??留뚮뱾?덉쑝硫?1 由ы꽩
	tree *a,*check,*tmp;
	a=(tree*)calloc(1,sizeof(tree));
	a->child=NULL;
	a->bro=NULL;
	int i;
	strcpy(a->name,name);
	if(cur->child==NULL){
		cur->child=a;
	}
	else{
		check=cur->child;
		while(1){
			if(check->bro==NULL){
				if(strcmp(check->name,a->name)>0){
					tmp=cur->child;
					cur->child=a;
					a->bro=tmp;
					return 1;
				}
				else if(strcmp(check->name,a->name)==0)
					return 0;
				else{
					check->bro=a;
					return 1;
				}
			}
			else{
				if(strcmp(check->bro->name,a->name)>0 && strcmp(check->name,a->name)<0){
					tmp=check->bro;
					check->bro=a;
					a->bro=tmp;
					return 1;
				}
			}
			check=check->bro;
		}
	}
}
unsigned short mk_indirect(unsigned short n, unsigned short db_s[]){ //(紐뉕컻 留뚮뱾寃껋씤媛, ?곗씠?곕? ?ｌ쓣 釉붾줉 ?섎쾭??
	unsigned short bit,db_n,i,j=0;
	db=(data_block*)calloc(1,sizeof(data_block));
	for(i=0;i<n/4;i++){
		db_n=make_data();
		bit=db_n&0x3fc;
		bit>>=2;
		db->data[j]|=bit;
		bit=db_n&0x3;
		bit<<=6;
		db->data[j+1]|=bit;

		db_n=make_data();
		bit=db_n&0x3f0;
		bit>>=4;
		db->data[j+1]|=bit;
		bit=db_n&0xf;
		bit<<=4;
		db->data[j+2]|=bit;

		db_n=make_data();
		bit=db_n&0x3c0;
		bit>>=6;
		db->data[j+2]|=bit;
		bit=db_n&0x3f;
		bit<<=2;
		db->data[j+3]|=bit;

		db_n=make_data();
		bit=db_n&0x300;
		bit>>=8;
		db->data[j+3]|=bit;
		bit=db_n&0xff;
		db->data[j+4]|=bit; // ?レ옄 4媛쒖뵫 洹쒖튃??媛吏?
		j+=5;
	}
	if(n%4>0){
		db_n=make_data();
		bit=db_n&0x3fc;
		bit>>=2;
		db->data[j]|=bit;
		bit=db_n&0x3;
		bit<<=6;
		db->data[j+1]|=bit;
		if(n%4>1){
			db_n=make_data();
			bit=db_n&0x3f0;
			bit>>=4;
			db->data[j+1]|=bit;
			bit=db_n&0xf;
			bit<<=4;
			db->data[j+2]|=bit;
			if(n%4>2){
				db_n=make_data();
				bit=db_n&0x3c0;
				bit>>=6;
				db->data[j+2]|=bit;
				bit=db_n&0x3f;
				bit<<=2;
				db->data[j+3]|=bit;
				if(n%4>3){
					db_n=make_data();
					bit=db_n&0x300;
					bit>>=8;
					db->data[j+3]|=bit;
					bit=db_n&0xff;
					db->data[j+4]|=bit;
				}
			}
		}
	}
	db_n=make_data();
	write_data(db_n);
	return db_n;
}
